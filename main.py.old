import os
import json
import telebot
import gspread
import logging
import random
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_log.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(dotenv_path="bot.env")
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    logger.error("–û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    exit()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Google Sheets API
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def reconnect_sheets():
    try:
        if not os.path.exists("google_sheets.json"):
            logger.error("–û—à–∏–±–∫–∞! –§–∞–π–ª google_sheets.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None, None

        with open("google_sheets.json", "r") as file:
            service_account_info = json.load(file)

        creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open("Stats")
        sheet = spreadsheet.sheet1
        logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ!")
        return client, sheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None, None

# –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
client, sheet = reconnect_sheets()
if not client or not sheet:
    exit()

bot = telebot.TeleBot(TOKEN)
user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {"name": message.chat.first_name, "username": message.chat.username}
    start_survey(chat_id)

def start_survey(chat_id):
    greeting = "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∑–∞–ø–∏—Ç–∞–Ω—å, —â–æ–± –∫—Ä–∞—â–µ –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—Ç–∏."

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("1", "2", "3", "4", "5")

    bot.send_message(chat_id, greeting)
    bot.send_message(chat_id, "–Ø–∫ –≤–∏ –æ—Ü—ñ–Ω—é—î—Ç–µ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –¥–ª—è —Å–µ–±–µ?\n(–î–µ 1 ‚Äî –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∞ 5 ‚Äî —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ.)", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_motivation)

def process_motivation(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['motivation'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("1-2 –≥–æ–¥–∏–Ω–∏", "3-4 –≥–æ–¥–∏–Ω–∏", "5-7 –≥–æ–¥–∏–Ω")

    bot.send_message(chat_id, "–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏–¥—ñ–ª—è—Ç–∏ –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è —â–æ—Ç–∏–∂–Ω—è?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_time)

def process_time(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['time'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("100-300 –≥—Ä–Ω", "300-500 –≥—Ä–Ω", "500-700 –≥—Ä–Ω", "–Ø –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞—é, —Ö–æ—á—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è")

    bot.send_message(chat_id, "–Ø–∫–∞ —Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω —É—Ä–æ–∫ –¥–ª—è –≤–∞—Å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_budget)

def process_budget(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['budget'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–ª—è —Ä–æ–±–æ—Ç–∏", "–î–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π", "–î–ª—è –ø–µ—Ä–µ—ó–∑–¥—É", "–î–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è", "–î–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –æ—Å–æ–±–∏—Å—Ç–∏—Ö –Ω–∞–≤–∏—á–æ–∫", "–Ü–Ω—à–µ")

    bot.send_message(chat_id, "–Ø–∫–∞ –º–µ—Ç–∞ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_goal)

def process_goal(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['goal'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("A1 (–ü–æ—á–∞—Ç–∫–æ–≤–∏–π)", "A2 (–ï–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∏–π)", "B1 (–°–µ—Ä–µ–¥–Ω—ñ–π)", "B2+ (–í–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ)", "C1 (–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π)", "C2 (–í—ñ–ª—å–Ω–µ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è)")
    markup.add("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó")

    bot.send_message(chat_id, "–Ø–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –≤ —Ç–µ–±–µ?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_level)

def process_level(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['level'] = message.text

    if message.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó":
        user_data[chat_id]['test_source'] = 'level_question'  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É, —á—Ç–æ —Ç–µ—Å—Ç –Ω–∞—á–∞—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ
        start_level_test(message)
    else:
        continue_survey(message)

def continue_survey(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ì—Ä—É–ø–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è", "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è")

    bot.send_message(chat_id, "–Ø–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–±—ñ –∑—Ä—É—á–Ω–∏–π?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_format)

def process_format(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['format'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–¢–∞–∫, —è –≥–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–µ–≥–∞–π–Ω–æ", "–ù—ñ, —Ö–æ—á—É —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è")

    bot.send_message(chat_id, "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –≤—ñ–¥—Ä–∞–∑—É, –∞–±–æ –∫—Ä–∞—â–µ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_start_choice)

def process_start_choice(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['start_choice'] = message.text

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ó–∞ –∫–æ–∂–µ–Ω —É—Ä–æ–∫", "–ü–æ–º—ñ—Å—è—á–Ω–æ", "–ö—É—Ä—Å–æ–º")

    bot.send_message(chat_id, "–Ø–∫ –í–∞–º –±—É–¥–µ –∑—Ä—É—á–Ω–æ —Å–ø–ª–∞—á—É–≤–∞—Ç–∏?", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_payment)

def process_payment(message):
    chat_id = message.chat.id
    if message.text == "/start":
        start_survey(chat_id)
        return

    user_data[chat_id]['payment'] = message.text

    try:
        # –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
        sheet.append_row([
            user_data[chat_id].get('name', ''),
            user_data[chat_id].get('username', ''),
            user_data[chat_id].get('level', ''),
            user_data[chat_id].get('goal', ''),
            user_data[chat_id].get('format', ''),
            user_data[chat_id].get('start_choice', ''),
            user_data[chat_id].get('motivation', ''),
            user_data[chat_id].get('time', ''),
            user_data[chat_id].get('budget', ''),
            user_data[chat_id].get('payment', ''),
            user_data[chat_id].get('obstacles', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        ])
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.first_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n"
                                   f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.chat.first_name} (@{message.chat.username})\n"
                                   f"üìö –†—ñ–≤–µ–Ω—å: {user_data[chat_id]['level']}\n"
                                   f"üéØ –ú–µ—Ç–∞: {user_data[chat_id]['goal']}\n"
                                   f"üìå –§–æ—Ä–º–∞—Ç: {user_data[chat_id]['format']}\n"
                                   f"üöÄ –ü–æ—á–∞—Ç–∏: {user_data[chat_id]['start_choice']}\n"
                                   f"üí° –ú–æ—Ç–∏–≤–∞—Ü—ñ—è: {user_data[chat_id]['motivation']}\n"
                                   f"‚è≥ –ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {user_data[chat_id]['time']}\n"
                                   f"üí∞ –ë—é–¥–∂–µ—Ç: {user_data[chat_id]['budget']}\n"
                                   f"üí≥ –°–ø–ª–∞—Ç–∞: {user_data[chat_id]['payment']}\n"
                                   f"‚ö†Ô∏è –ü–µ—Ä–µ—à–∫–æ–¥–∏: {user_data[chat_id].get('obstacles', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –≥–ª–∞–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìö –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó", "üí≥ –ö—É–ø–∏—Ç–∏ –∫—É—Ä—Å", "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫", "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        bot.send_message(chat_id, "–û—Å—å –≤–∞—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥—ñ–π:", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, handle_button_press)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")

def handle_button_press(message):
    chat_id = message.chat.id

    if message.text == "üìö –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó":
        user_data[chat_id]['test_source'] = 'main_menu'  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É, —á—Ç–æ —Ç–µ—Å—Ç –Ω–∞—á–∞—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        start_level_test(message)
    elif message.text in ["üí≥ –ö—É–ø–∏—Ç–∏ –∫—É—Ä—Å", "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫", "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]:
        ask_for_phone(message)

def ask_for_phone(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ó–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É:")
    bot.register_next_step_handler_by_chat_id(chat_id, save_phone)

def save_phone(message):
    chat_id = message.chat.id
    phone_number = message.text
    user_data[chat_id]['phone'] = phone_number

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü–µ
        last_row = len(sheet.get_all_values())
        sheet.update_cell(last_row, 12, phone_number)
        print(f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.chat.first_name}: {phone_number}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {e}")

    bot.send_message(chat_id, "–î—è–∫—É—î–º–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üòä")

def start_level_test(message):
    chat_id = message.chat.id
    user_data[chat_id]['current_question'] = 0
    user_data[chat_id]['correct_answers'] = 0
    
    questions = [
        # A1-A2 (2 –≤–æ–ø—Ä–æ—Å–∞)
        {
            "question": "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ '–∫—ñ—Ç' –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É",
            "correct": "Cat",
            "wrong": ["Dog", "Bird", "Fish"],
            "difficulty": 1
        },
        {
            "question": "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É '–ú–µ–Ω–µ –∑–≤–∞—Ç–∏' –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É",
            "correct": "My name is",
            "wrong": ["I am", "Call me", "My title is"],
            "difficulty": 2
        },
        
        # B1 (2 –≤–æ–ø—Ä–æ—Å–∞)
        {
            "question": "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É '–ú–µ–Ω—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —á–∏—Ç–∞—Ç–∏' –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É",
            "correct": "I like reading",
            "wrong": ["I read like", "I love read", "I like to read"],
            "difficulty": 3
        },
        {
            "question": "–©–æ –æ–∑–Ω–∞—á–∞—î —Ñ—Ä–∞–∑–∞ 'piece of cake'?",
            "correct": "–©–æ—Å—å –ª–µ–≥–∫–µ",
            "wrong": ["–©–æ—Å—å —Å–º–∞—á–Ω–µ", "–©–æ—Å—å —Å–∫–ª–∞–¥–Ω–µ", "–©–æ—Å—å —Ü—ñ–∫–∞–≤–µ"],
            "difficulty": 3
        },
        
        # B2 (2 –≤–æ–ø—Ä–æ—Å–∞)
        {
            "question": "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É '–Ø –≤–∏–≤—á–∞—é –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É' –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É",
            "correct": "I am learning English",
            "wrong": ["I study English", "I have learned English", "I learn English"],
            "difficulty": 4
        },
        {
            "question": "–©–æ –æ–∑–Ω–∞—á–∞—î —Ñ—Ä–∞–∑–∞ 'spill the beans'?",
            "correct": "–í–∏–¥–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç",
            "wrong": ["–ó—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É", "–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É", "–ó—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å"],
            "difficulty": 4
        },
        
        # C1-C2 (4 –≤–æ–ø—Ä–æ—Å–∞)
        {
            "question": "–Ø–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ 'ephemeral'?",
            "correct": "–ö–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω–∏–π",
            "wrong": ["–í—ñ—á–Ω–∏–π", "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π", "–ü–æ–≤—ñ–ª—å–Ω–∏–π"],
            "difficulty": 5
        },
        {
            "question": "–Ø–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ 'serendipity'?",
            "correct": "–í–∏–ø–∞–¥–∫–æ–≤–∞ —É–¥–∞—á–∞",
            "wrong": ["–°—É–º", "–ó–ª—ñ—Å—Ç—å", "–©–∞—Å—Ç—è"],
            "difficulty": 5
        },
        {
            "question": "–Ø–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–∞ 'quintessential'?",
            "correct": "–Ü–¥–µ–∞–ª—å–Ω–∏–π",
            "wrong": ["–ù–µ–¥–æ—Å–∫–æ–Ω–∞–ª–∏–π", "–ó–≤–∏—á–∞–π–Ω–∏–π", "–°–∫–ª–∞–¥–Ω–∏–π"],
            "difficulty": 5
        },
        {
            "question": "–©–æ –æ–∑–Ω–∞—á–∞—î —Ñ—Ä–∞–∑–∞ 'hit the nail on the head'?",
            "correct": "–ü–æ–ø–∞—Å—Ç–∏ –≤ —Ç–æ—á–∫—É",
            "wrong": ["–ó—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É", "–ü–æ—á–∞—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ", "–ó—É–ø–∏–Ω–∏—Ç–∏ —â–æ—Å—å"],
            "difficulty": 5
        }
    ]
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    for q in questions:
        choices = [q['correct']] + q['wrong']
        random.shuffle(choices)
        q['choices'] = choices
        q['answer'] = q['correct']
    
    user_data[chat_id]['questions'] = questions
    ask_question(message)

def ask_question(message):
    chat_id = message.chat.id
    question_index = user_data[chat_id]['current_question']
    questions = user_data[chat_id]['questions']

    if question_index < len(questions):
        question_data = questions[question_index]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —ç–º–æ–¥–∑–∏ –∫ –≤–æ–ø—Ä–æ—Å—É
        progress = f"üìù –ü–∏—Ç–∞–Ω–Ω—è {question_index + 1}/{len(questions)}"
        difficulty_stars = "‚≠ê" * question_data["difficulty"]
        
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ —ç–º–æ–¥–∑–∏
        for choice in question_data["choices"]:
            markup.add(choice)
            
        markup.add("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
        bot.send_message(chat_id, f"{progress}\n{difficulty_stars}\n\n{question_data['question']}", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, check_answer)
    else:
        show_main_menu(message)

def check_answer(message):
    chat_id = message.chat.id
    
    if message.text == "/start":
        start_survey(chat_id)
        return
        
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É":
        if user_data[chat_id].get('test_source') == 'level_question':
            markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add("A1 (–ü–æ—á–∞—Ç–∫–æ–≤–∏–π)", "A2 (–ï–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∏–π)")
            markup.add("B1 (–°–µ—Ä–µ–¥–Ω—ñ–π)", "B2+ (–í–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ)")
            markup.add("C1 (–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π)", "C2 (–í—ñ–ª—å–Ω–µ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è)")
            markup.add("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó")
            bot.send_message(chat_id, "–Ø–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –≤ —Ç–µ–±–µ?", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, process_level)
        else:
            show_main_menu(message)
        return
        
    if message.text == "/start":
        start_survey(chat_id)
        return
        
    question_index = user_data[chat_id]['current_question']
    questions = user_data[chat_id]['questions']
    current_question = questions[question_index]
    
    if message.text == current_question["answer"]:
        user_data[chat_id]['correct_answers'] += 1
        bot.send_message(chat_id, "‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {current_question['answer']}")
        
    user_data[chat_id]['current_question'] += 1
    
    if user_data[chat_id]['current_question'] >= len(questions):
        correct = user_data[chat_id]['correct_answers']
        total = len(questions)
        percentage = (correct / total) * 100
        
        level = "A1 (–ü–æ—á–∞—Ç–∫–æ–≤–∏–π)"
        if percentage >= 90:
            level = "C2 (–í—ñ–ª—å–Ω–µ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è)"
        elif percentage >= 80:
            level = "C1 (–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π)"
        elif percentage >= 70:
            level = "B2+ (–í–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ)"
        elif percentage >= 60:
            level = "B1 (–°–µ—Ä–µ–¥–Ω—ñ–π)"
        elif percentage >= 50:
            level = "A2 (–ï–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∏–π)"
            
        user_data[chat_id]['level'] = level
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = (
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n"
            f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n"
            f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫: {percentage:.1f}%\n"
            f"üéì –í–∞—à –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {level}\n\n"
            f"üí´ –î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É!"
        )
        
        bot.send_message(chat_id, result_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Sheets —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            save_results_to_sheets(message, correct, total, percentage, level)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
            global client, sheet
            client, sheet = reconnect_sheets()
            if client and sheet:
                try:
                    save_results_to_sheets(message, correct, total, percentage, level)
                except Exception as e:
                    logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        
        if user_data[chat_id].get('test_source') == 'level_question':
            continue_survey(message)
        else:
            show_main_menu(message)
    else:
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
        bot.send_message(chat_id, "‚è≥ –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è...")
        ask_question(message)

def save_results_to_sheets(message, correct, total, percentage, level):
    chat_id = message.chat.id
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    row_data = [
        timestamp,  # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
        message.chat.first_name,  # –Ü–º'—è
        f"@{message.chat.username}" if message.chat.username else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",  # –ù—ñ–∫–Ω–µ–π–º
        f"{correct}/{total}",  # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É
        f"{percentage:.1f}%",  # –í—ñ–¥—Å–æ—Ç–æ–∫
        level,  # –†—ñ–≤–µ–Ω—å
        user_data[chat_id].get('goal', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),  # –ú–µ—Ç–∞
        user_data[chat_id].get('time', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),  # –ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
        user_data[chat_id].get('budget', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),  # –ë—é–¥–∂–µ—Ç
        user_data[chat_id].get('format', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),  # –§–æ—Ä–º–∞—Ç
        user_data[chat_id].get('payment', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),  # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
        user_data[chat_id].get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')  # –¢–µ–ª–µ—Ñ–æ–Ω
    ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        headers = sheet.row_values(1)
        if not headers:
            sheet.append_row([
                "–î–∞—Ç–∞ —Ç–∞ —á–∞—Å",
                "–Ü–º'—è",
                "Telegram",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É",
                "–í—ñ–¥—Å–æ—Ç–æ–∫",
                "–†—ñ–≤–µ–Ω—å",
                "–ú–µ—Ç–∞",
                "–ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è",
                "–ë—é–¥–∂–µ—Ç",
                "–§–æ—Ä–º–∞—Ç",
                "–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏",
                "–¢–µ–ª–µ—Ñ–æ–Ω"
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            header_format = {
                "backgroundColor": {"red": 0.2, "green": 0.2, "blue": 0.2},
                "textFormat": {"foregroundColor": {"red": 1, "green": 1, "blue": 1}, "bold": True},
                "horizontalAlignment": "CENTER"
            }
            
            sheet.format("A1:L1", header_format)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            sheet.set_column_width("A", 150)  # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
            sheet.set_column_width("B", 100)  # –Ü–º'—è
            sheet.set_column_width("C", 120)  # Telegram
            sheet.set_column_width("D", 100)  # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É
            sheet.set_column_width("E", 80)   # –í—ñ–¥—Å–æ—Ç–æ–∫
            sheet.set_column_width("F", 150)  # –†—ñ–≤–µ–Ω—å
            sheet.set_column_width("G", 200)  # –ú–µ—Ç–∞
            sheet.set_column_width("H", 120)  # –ß–∞—Å –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
            sheet.set_column_width("I", 100)  # –ë—é–¥–∂–µ—Ç
            sheet.set_column_width("J", 150)  # –§–æ—Ä–º–∞—Ç
            sheet.set_column_width("K", 120)  # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
            sheet.set_column_width("L", 120)  # –¢–µ–ª–µ—Ñ–æ–Ω
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.append_row(row_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        last_row = len(sheet.get_all_values())
        row_format = {
            "backgroundColor": {"red": 0.95, "green": 0.95, "blue": 0.95},
            "horizontalAlignment": "CENTER",
            "textFormat": {"foregroundColor": {"red": 0, "green": 0, "blue": 0}}
        }
        
        sheet.format(f"A{last_row}:L{last_row}", row_format)
        
        logger.info(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.chat.first_name}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ç–∞–±–ª–∏—Ü—é: {e}")

def show_main_menu(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìö –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó", "üí≥ –ö—É–ø–∏—Ç–∏ –∫—É—Ä—Å", "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫", "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    bot.send_message(chat_id, "–û—Å—å –≤–∞—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥—ñ–π:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, handle_button_press)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(none_stop=True)