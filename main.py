import telebot
from config import bot_config
from handlers import start, test, survey
from utils.logger import get_logger
from utils.referral import ref_system
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    
    @bot.message_handler(commands=['create_link'])
    def handle_create_link(message):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        if str(message.from_user.id) != bot_config.ADMIN_ID:
            return
            
        try:
            args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if len(args) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
                
            platform, theme = args
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π ID –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_id = random.randint(1000, 9999)
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É
            link = ref_system.create_referral_link(
                partner_id=partner_id,
                platform=platform,
                theme=theme
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            response = f"‚ú® –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            response += f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
            response += f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
            response += f"üéØ –¢–µ–º–∞: {theme}\n"
            response += f"üÜî ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_id}\n\n"
            response += "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            
            bot.reply_to(message, response)
            
        except (ValueError, IndexError) as e:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_link platform theme\n"
                                 "–ù–∞–ø—Ä–∏–º–µ—Ä: /create_link tiktok crypto")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
    
    @bot.message_handler(commands=['stats'])
    def handle_stats(message):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if str(message.from_user.id) != bot_config.ADMIN_ID:
            return
            
        try:
            args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            
            if args:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                partner_id = int(args[0])
                stats = ref_system.get_partner_stats(partner_id)
                
                response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ #{partner_id}\n\n"
                response += f"üëÜ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {stats['total_clicks']}\n"
                response += f"üéØ –ù–∞—á–∞–ª–∏ –æ–ø—Ä–æ—Å: {stats['total_starts']}\n"
                response += f"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats['total_completes']}\n\n"
                
                for platform, data in stats['by_platform'].items():
                    response += f"üì± {platform.upper()}:\n"
                    response += f"   –ö–ª–∏–∫–∏: {data.get('clicks', 0)}\n"
                    response += f"   –°—Ç–∞—Ä—Ç—ã: {data.get('starts', 0)}\n"
                    response += f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data.get('completes', 0)}\n"
            else:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = ref_system.get_total_stats()
                response = "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                response += f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {stats['total_links']}\n"
                response += f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {stats['total_partners']}\n"
                response += f"üëÜ –í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {stats['total_conversions']}\n"
            
            bot.reply_to(message, response)
            
        except (ValueError, IndexError) as e:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                                 "/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                                 "/stats partner_id - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not bot_config.TOKEN:
        logger.error("–û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = telebot.TeleBot(bot_config.TOKEN)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_admin_handlers(bot)
    start.register_handlers(bot)
    test.register_handlers(bot)
    survey.register_handlers(bot)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)

if __name__ == "__main__":
    main()
